// Copyright (c) Crown Copyright (Department for Energy Security and Net Zero). Licensed under The MIT License (MIT).  See License file in the project root for license information.
using Newtonsoft.Json;
using System.Net;
using System.Security.Cryptography;
using System.Text;

namespace CHMM.DataImport.Logic.Core.Check
{
    internal class MalwareScanner : IMalwareScanner
    {
        private string accessKey = "YOUR_ACCESS_KEY";
        private string secretKey = "YOUR_SECRET_KEY";
        private string endpoint = "https://s3.amazonaws.com";
        private string region = "us-west-2";

        private class MalwareResult
        {
            public DateTime dateScanned { get; set; }
            public List<object>? detectedInfections { get; set; }
            public object? errorMessage { get; set; }
            public string? result { get; set; }
        }

        public bool IsClean(string data)
        {
            string requestId = Guid.NewGuid().ToString();

            byte[] fileData = Encoding.ASCII.GetBytes(data);

            string fileHash = GenerateFileHash(fileData);
            string fileBase64 = Convert.ToBase64String(fileData);

            string jsonPayload = GenerateJsonPayload(requestId, fileHash, fileBase64);

            byte[] secretKeyBytes = Encoding.UTF8.GetBytes(secretKey);
            using (var hmacSha256 = new HMACSHA256(secretKeyBytes))
            {
                byte[] payloadBytes = Encoding.UTF8.GetBytes(jsonPayload);
                byte[] signatureBytes = hmacSha256.ComputeHash(payloadBytes);
                string signature = Convert.ToBase64String(signatureBytes);

                var request = GenerateWebRequest(accessKey, endpoint, region, signature);

                using (var streamWriter = new StreamWriter(request.GetRequestStream()))
                {
                    streamWriter.Write(jsonPayload);
                    streamWriter.Flush();
                    streamWriter.Close();
                }

                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        var output = GetResultFromResponse(response);
                        return output.result == "Clean";
                    }
                    else
                    {
                        return false;
                    }
                }
            }
        }

        private static MalwareResult GetResultFromResponse(HttpWebResponse response)
        {
            using (var streamReader = new StreamReader(response.GetResponseStream()))
            {
                string responseJson = streamReader.ReadToEnd();
                return JsonConvert.DeserializeObject<MalwareResult>(responseJson);
            }
        }

        private static HttpWebRequest GenerateWebRequest(string accessKey, string endpoint, string region, string signature)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create($"{endpoint}/scan");

            request.Method = "POST";
            request.Headers.Add("x-amz-access-key", accessKey);
            request.Headers.Add("x-amz-region", region);
            request.Headers.Add("x-amz-signature", signature);
            request.ContentType = "application/json";

            return request;
        }

        private static string GenerateJsonPayload(string requestId, string fileHash, string fileBase64)
        {
            var requestPayload = new
            {
                requestId,
                fileBase64,
                fileHash
            };

            return JsonConvert.SerializeObject(requestPayload);
        }

        private static string GenerateFileHash(byte[] fileData)
        {
            string fileHash;
            using (var md5 = MD5.Create())
            {
                byte[] hashBytes = md5.ComputeHash(fileData);
                fileHash = BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
            }

            return fileHash;
        }
    }
}
